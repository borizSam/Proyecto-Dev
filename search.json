[
  {
    "objectID": "amazon.html",
    "href": "amazon.html",
    "title": "AWS",
    "section": "",
    "text": "TEST"
  },
  {
    "objectID": "indexgit.html",
    "href": "indexgit.html",
    "title": "GitHub",
    "section": "",
    "text": "MODIFICAR LA DOCUMENTACIÓN\nGitHub es un espacio en línea donde puedo almacenar mis proyectos (repositorios), compartirlos con otras personas y colaborar. Utiliza Git para gestionar los cambios en el código, lo que me permite trabajar junto con otros desarrolladores sin interferir en su trabajo."
  },
  {
    "objectID": "indexgit.html#qué-es-github",
    "href": "indexgit.html#qué-es-github",
    "title": "GitHub",
    "section": "¿Qué es GitHub?",
    "text": "¿Qué es GitHub?\nGitHub es una plataforma en línea que me permite guardar mis proyectos, trabajar en equipo y hacer un seguimiento de todos los cambios que se hacen en el código. Está basado en Git, un sistema de control de versiones que me ayuda a gestionar todo el historial de cambios, facilitando la colaboración sin que los errores o conflictos se presenten entre los miembros del equipo."
  },
  {
    "objectID": "indexgit.html#comandos-básicos-de-git",
    "href": "indexgit.html#comandos-básicos-de-git",
    "title": "GitHub",
    "section": "Comandos Básicos de Git",
    "text": "Comandos Básicos de Git\nEstos son algunos de los comandos más importantes que uso para trabajar con Git y GitHub:\n\ngit init: Inicia un nuevo repositorio Git en mi directorio.\ngit status: Muestra el estado de los archivos, es decir, qué archivos se han modificado o agregado.\ngit add .: Agrega todos los archivos modificados para prepararlos antes de hacer un commit.\ngit commit -m \"Mensaje\": Guarda los cambios que he hecho en el repositorio con un mensaje explicativo.\ngit push: Sube los cambios que he hecho localmente al repositorio remoto en GitHub."
  },
  {
    "objectID": "indexgit.html#ramas-branches",
    "href": "indexgit.html#ramas-branches",
    "title": "GitHub",
    "section": "Ramas (Branches)",
    "text": "Ramas (Branches)\nGitHub me permite trabajar con ramas, que son versiones separadas del proyecto donde puedo hacer cambios sin afectar el trabajo principal (la rama main o master). Luego, puedo fusionar las ramas cuando los cambios estén listos.\n\ngit branch: Muestra las ramas que tengo en el repositorio.\ngit switch &lt;nombre_rama&gt;: Cambio de una rama a otra.\ngit merge &lt;nombre_rama&gt;: Fusiona los cambios de una rama a la actual."
  },
  {
    "objectID": "indexgit.html#colaboración-en-github",
    "href": "indexgit.html#colaboración-en-github",
    "title": "GitHub",
    "section": "Colaboración en GitHub",
    "text": "Colaboración en GitHub\nGitHub está diseñado para que pueda colaborar fácilmente con otros desarrolladores. Algunas herramientas importantes para la colaboración son:\n\nPull Requests (PR): Cuando hago cambios en una rama y quiero integrarlos con la rama principal, creo un pull request. Otras personas pueden revisar y comentar mis cambios antes de fusionarlos.\nIssues: Puedo usar los issues para crear tareas, rastrear errores o sugerir nuevas funcionalidades para el proyecto."
  },
  {
    "objectID": "indexgit.html#fork-y-pull-request",
    "href": "indexgit.html#fork-y-pull-request",
    "title": "GitHub",
    "section": "Fork y Pull Request",
    "text": "Fork y Pull Request\nSi quiero contribuir a proyectos de código abierto, puedo seguir este flujo:\n\nFork: Hago una copia del repositorio para poder modificarlo.\nPull Request: Después de hacer mis cambios, envío un pull request para que los encargados del proyecto revisen y fusionen mis modificaciones."
  },
  {
    "objectID": "indexgit.html#github-actions",
    "href": "indexgit.html#github-actions",
    "title": "GitHub",
    "section": "GitHub Actions",
    "text": "GitHub Actions\nGitHub Actions me permite automatizar tareas como pruebas, compilación y despliegue. Puedo crear flujos de trabajo automáticos que se ejecutan en eventos específicos, como cuando subo nuevos cambios al repositorio."
  },
  {
    "objectID": "indexgit.html#seguridad-y-permisos",
    "href": "indexgit.html#seguridad-y-permisos",
    "title": "GitHub",
    "section": "Seguridad y Permisos",
    "text": "Seguridad y Permisos\nEn GitHub, puedo gestionar quién puede ver o modificar mis repositorios:\n\nPermisos de Repositorio: Puedo establecer quién tiene acceso para ver, editar o contribuir en mi proyecto.\nBranch Protection Rules: Puedo proteger ciertas ramas para asegurarme de que los cambios solo se hagan después de pasar revisiones o pruebas."
  },
  {
    "objectID": "indexgit.html#buenas-prácticas",
    "href": "indexgit.html#buenas-prácticas",
    "title": "GitHub",
    "section": "Buenas Prácticas",
    "text": "Buenas Prácticas\nAl trabajar con Git y GitHub, es importante seguir algunas buenas prácticas:\n\nHacer commits pequeños y frecuentes para evitar conflictos.\nEscribir mensajes de commit claros que expliquen qué cambios se hicieron.\nMantener las ramas organizadas y nombrarlas de manera descriptiva."
  },
  {
    "objectID": "indexgit.html#instalacion-de-la-cli-de-git-y-gh",
    "href": "indexgit.html#instalacion-de-la-cli-de-git-y-gh",
    "title": "GitHub",
    "section": "Instalacion de la CLI de Git y GH",
    "text": "Instalacion de la CLI de Git y GH\nPara instalar la CLI de GIT ejeutamos el siguiente comando:\nsudo apt install git"
  },
  {
    "objectID": "indexgit.html#instalacion-de-la-cli-gh-en-debian",
    "href": "indexgit.html#instalacion-de-la-cli-gh-en-debian",
    "title": "GitHub",
    "section": "Instalacion de la CLI (GH) en debian",
    "text": "Instalacion de la CLI (GH) en debian\nAntes de instalar, es recomendable actualizar tu sistema para asegurarte de que todo esté al día:\nsudo apt update\nsudo apt upgrade\nsudo apt install curl\n# Agregar el repositorio de GitHub CLI\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /usr/share/keyrings/github-archive-keyring.gpg &gt; /dev/null\n# Agrega el repositorio de GitHub CLI a tu lista de fuentes\necho \"deb [signed-by=/usr/share/keyrings/github-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list &gt; /dev/null\n# Actualizar los repositorios\nsudo apt update\nsudo apt install gh\n# Revisamos la version de GH\ngh --version\nPara hacer el login en GH configuramos el nombre y el mail:\ngit config --global user.name \"Boris\"\ngit config --global user.email \"pedro@correo.com\"\ngh auth login"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Espacio reservado"
  },
  {
    "objectID": "docker.html",
    "href": "docker.html",
    "title": "Docker",
    "section": "",
    "text": "Diagrama de Docker"
  },
  {
    "objectID": "docker.html#qué-es-docker",
    "href": "docker.html#qué-es-docker",
    "title": "Docker",
    "section": "1. ¿Qué es Docker?",
    "text": "1. ¿Qué es Docker?\n\nDocker es una plataforma que permite empaquetar, distribuir y ejecutar aplicaciones en contenedores.\nLos contenedores son entornos ligeros y aislados que incluyen todo lo necesario para ejecutar una aplicación: código, dependencias y configuraciones."
  },
  {
    "objectID": "docker.html#componentes-principales-de-docker",
    "href": "docker.html#componentes-principales-de-docker",
    "title": "Docker",
    "section": "2. Componentes principales de Docker",
    "text": "2. Componentes principales de Docker\n\nDocker Engine: El núcleo de Docker que permite crear y ejecutar contenedores.\nImágenes: Plantillas inmutables que contienen el sistema operativo, dependencias y la aplicación. Se construyen a partir de un archivo llamado Dockerfile.\nContenedores: Instancias en ejecución basadas en imágenes.\nDocker Hub: Un registro público para compartir imágenes de Docker.\nVolumes: Almacenamiento persistente para datos generados dentro de los contenedores."
  },
  {
    "objectID": "docker.html#conceptos-básicos-de-uso",
    "href": "docker.html#conceptos-básicos-de-uso",
    "title": "Docker",
    "section": "3. Conceptos básicos de uso",
    "text": "3. Conceptos básicos de uso\n\nDockerfile: Archivo que define cómo se crea una imagen (instrucciones como FROM, COPY, RUN).\nComandos esenciales:\n\ndocker build: Crea una imagen a partir de un Dockerfile.\ndocker run: Ejecuta un contenedor basado en una imagen.\ndocker ps: Lista los contenedores en ejecución.\ndocker stop: Detiene un contenedor en ejecución.\ndocker pull y docker push: Descargar o subir imágenes al registro."
  },
  {
    "objectID": "docker.html#ventajas-de-usar-docker",
    "href": "docker.html#ventajas-de-usar-docker",
    "title": "Docker",
    "section": "4. Ventajas de usar Docker",
    "text": "4. Ventajas de usar Docker\n\nPortabilidad: Los contenedores funcionan igual en cualquier sistema que soporte Docker.\nAislamiento: Los entornos son independientes, evitando conflictos entre aplicaciones.\nEscalabilidad: Ideal para entornos de microservicios y despliegues en la nube.\nRapidez: Contenedores más ligeros que las máquinas virtuales tradicionales."
  },
  {
    "objectID": "docker.html#casos-de-uso-comunes",
    "href": "docker.html#casos-de-uso-comunes",
    "title": "Docker",
    "section": "5. Casos de uso comunes",
    "text": "5. Casos de uso comunes\n\nDesarrollo: Crear entornos consistentes para los desarrolladores.\nPruebas: Simular entornos de producción en local.\nDespliegue: Automatizar la distribución de aplicaciones en servidores o nubes."
  },
  {
    "objectID": "docker.html#docker-hub",
    "href": "docker.html#docker-hub",
    "title": "Docker",
    "section": "¿Docker Hub?",
    "text": "¿Docker Hub?\nDocker Hub es una plataforma en línea para almacenar, compartir y descargar imágenes de Docker. Es el registro oficial de Docker, con imágenes públicas, privadas y oficiales mantenidas por Docker y terceros confiables."
  },
  {
    "objectID": "docker.html#cómo-funciona",
    "href": "docker.html#cómo-funciona",
    "title": "Docker",
    "section": "¿Cómo funciona?",
    "text": "¿Cómo funciona?\n\nRegistro: Creamos una cuenta en Docker Hub.\nBuscar imágenes: Usamos docker search &lt;nombre&gt; o busca en la web.\nDescargar imágenes: Usamos docker pull &lt;imagen&gt;, por ejemplo, docker pull nginx.\nSubir imágenes:\n\nEtiqueta: docker tag &lt;imagen-local&gt; &lt;usuario&gt;/&lt;repositorio&gt;.\nSube: docker push &lt;usuario&gt;/&lt;repositorio&gt;.\n\nRepositorios: Organiza imágenes en repositorios públicos (gratis) o privados (requiere plan pago)."
  },
  {
    "objectID": "docker.html#ventajas",
    "href": "docker.html#ventajas",
    "title": "Docker",
    "section": "Ventajas",
    "text": "Ventajas\n\nAlmacenamiento y descarga global.\nImágenes oficiales verificadas.\nAutomatización de imágenes.\nColaboración en equipo.\n\nDocker Hub es esencial para gestionar y compartir imágenes en proyectos Docker."
  },
  {
    "objectID": "docker.html#instalar-docker-usando-el-apt-repositorio",
    "href": "docker.html#instalar-docker-usando-el-apt-repositorio",
    "title": "Docker",
    "section": "Instalar docker usando el apt repositorio",
    "text": "Instalar docker usando el apt repositorio\n\n1. Agregar la clave GPG oficial de Docker:\nEjecuta los siguientes comandos para agregar la clave GPG oficial de Docker:\n- sudo apt-get update\n- sudo apt-get install ca-certificates curl\n- sudo install -m 0755 -d /etc/apt/keyrings\n- sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\n- sudo chmod a+r /etc/apt/keyrings/docker.asc ```\n\n\n2. Agregar el repositorio a las fuentes de Apt:\n- echo \\\n    \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n    $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n- sudo apt-get update\nNota: Si utiliza una distribución derivada de Ubuntu, como Linux Mint, es posible que necesite utilizar UBUNTU_CODENAME en lugar de VERSION_CODENAME.\n\n\nInstalar los paquetes de Docker\n- sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n- sudo docker run hello-world\n\n\nRevisar la version de tu docker instalado\n- sudo docker --version"
  },
  {
    "objectID": "docker.html#ejecución-el-contenedor-de-react-y-spring",
    "href": "docker.html#ejecución-el-contenedor-de-react-y-spring",
    "title": "Docker",
    "section": "1.2 Ejecución el contenedor de React y Spring",
    "text": "1.2 Ejecución el contenedor de React y Spring\nPara ejecutar el contenedor de React en el puerto 90 (en el host) y el puerto 80 (en el contenedor), se utiliza el siguiente comando: docker run -d --name react -p 90:80 react.\nEl contenedor de React se ejecutará en el puerto 80 dentro del contenedor, pero mapeado al puerto 90 en el host, para permitir que el frontend esté accesible desde http://localhost:90.\nPara ejecutar el contenedor de Spring Boot en el puerto 8080 tanto en el contenedor como en el host, se utiliza el siguiente comando:\ndocker run -d --name spring-boot -p 8080:8080 spring-boot."
  },
  {
    "objectID": "docker.html#creación-de-una-red-interna-para-los-contenedores",
    "href": "docker.html#creación-de-una-red-interna-para-los-contenedores",
    "title": "Docker",
    "section": "2. Creación de una Red Interna para los Contenedores",
    "text": "2. Creación de una Red Interna para los Contenedores\nPara permitir que los contenedores se comuniquen entre sí de manera segura, creamos una red interna de Docker. sudo docker network create red-book-spring Ahora verificamos las redes creadas en Docker con el siguiente comando: sudo docker network ls. Luego lanzamos ambos contenedores dentro de una red interna llamada red-book-spring. Esto permite que los contenedores se comuniquen entre sí sin necesidad de exponer sus puertos públicamente, utilizando los siguientes comandos: sudo docker run -d --name spring --network red-book-spring -p 8080:8080 spring-boot y sudo docker run -d --name react --network red-book-spring -p 90:80 react. Con estas configuraciones, los contenedores de Spring Boot y React estarán conectados a la red red-book-spring y podrán comunicarse entre sí dentro de la red interna, sin necesidad de exponer puertos adicionales al exterior."
  },
  {
    "objectID": "docker.html#comprobación-de-la-configuración",
    "href": "docker.html#comprobación-de-la-configuración",
    "title": "Docker",
    "section": "3. Comprobación de la Configuración",
    "text": "3. Comprobación de la Configuración\nPara revisar de que todo está configurado correctamente y los contenedores están funcionando, podemos utilizar los siguientes comandos: sudo docker ps para verificar que los contenedores están en ejecución, y sudo docker network inspect red-book-spring para verificar la conexión de los contenedores a la red. Con estos pasos, los contenedores de Spring Boot y React estarán ejecutándose correctamente y podrán comunicarse entre sí dentro de la red interna."
  },
  {
    "objectID": "jenkins.html",
    "href": "jenkins.html",
    "title": "Jenkins",
    "section": "",
    "text": "Jenkins es una herramienta de automatización de código abierto que utilizo principalmente para Integración Continua (CI) y Entrega Continua/Despliegue Continuo (CD). Me ayuda a compilar, probar y desplegar software de manera eficiente."
  },
  {
    "objectID": "jenkins.html#características-clave",
    "href": "jenkins.html#características-clave",
    "title": "Jenkins",
    "section": "Características clave",
    "text": "Características clave\n\nPlugins: Es altamente extensible con más de 1800 plugins, lo que me permite adaptarlo a mis necesidades.\nPipeline as Code: Puedo definir pipelines usando archivos como Jenkinsfile, lo que facilita la gestión del flujo de trabajo.\nCompatibilidad: Funciona con múltiples sistemas operativos y herramientas de desarrollo que uso habitualmente.\nAutomatización: Me permite programar y ejecutar automáticamente tareas repetitivas, ahorrándome tiempo."
  },
  {
    "objectID": "jenkins.html#descargar-la-imagen-de-docker-de-jenkins",
    "href": "jenkins.html#descargar-la-imagen-de-docker-de-jenkins",
    "title": "Jenkins",
    "section": "1. Descargar la Imagen de Docker de Jenkins",
    "text": "1. Descargar la Imagen de Docker de Jenkins\nDescargamos la imagen oficial de Jenkins desde DockerHub:\nboris@Dev-Final:~/Jenkins$ sudo docker pull jenkins/jenkins:lts\nAhora ejecutamos lanzamos el contenedor importante revisar los volumenes y tambien el permiso de jenkins –privileged por que ejecutara un contenedor.\nboris@Dev-Final:~/Jenkins$ sudo docker run –privileged -d -p 8080:8080 -p 50000:50000 -v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts"
  },
  {
    "objectID": "jenkins.html#crear-cuenta-e-inicio-inicial",
    "href": "jenkins.html#crear-cuenta-e-inicio-inicial",
    "title": "Jenkins",
    "section": "2. Crear Cuenta e Inicio Inicial",
    "text": "2. Crear Cuenta e Inicio Inicial\nUna vez lanzado el contenedor de jenkins realizamos la instalación antes cogemos la contraseña inicial: boris@Dev-Final:~/Jenkins$ sudo docker exec -it sharp_stonebraker cat /var/jenkins_home/secrets/initialAdminPassword importante ponerle un nombre a nuestro contenedor que luego nos asigna uno random.\n1. Accede a Jenkins a través de `http://localhost:8080`.\n2. Recupera la contraseña inicial de administrador:\n    sudo docker exec -it sharp_stonebraker cat /var/jenkins_home/secrets/initialAdminPassword\n3. Sigue el asistente de configuración:\n    - Instala los complementos sugeridos o selecciona complementos específicos.\n    - Crea una cuenta de administrador.\n4. Completa la configuración y accede al panel de control de Jenkins."
  },
  {
    "objectID": "jenkins.html#instalar-plugins-basicós-en-nuestro-jenkins",
    "href": "jenkins.html#instalar-plugins-basicós-en-nuestro-jenkins",
    "title": "Jenkins",
    "section": "3. Instalar plugins basicós en nuestro jenkins:",
    "text": "3. Instalar plugins basicós en nuestro jenkins:\nVamos a Jenkins y instalamos los plugins necesarios.\n\n- Integración con Maven\n- Git\n- Estibador\n- SSH\n- Escáner SonarQube\nPor otra parte tambien instalamos el JKD y maven y Docker ya que para nuestro srping-boot nos sera necesario."
  },
  {
    "objectID": "jenkins.html#creamos-nuestro-pipeline",
    "href": "jenkins.html#creamos-nuestro-pipeline",
    "title": "Jenkins",
    "section": "4. Creamos nuestro pipeline:",
    "text": "4. Creamos nuestro pipeline:\nDefinimos nuestras tools docker git, maven y java importante revisar las versiones con las que se va atrabajar en este caso el springboot trabaja con JDK21 y Maven."
  },
  {
    "objectID": "jenkins.html#docker-in-docker",
    "href": "jenkins.html#docker-in-docker",
    "title": "Jenkins",
    "section": "Docker-in-Docker:",
    "text": "Docker-in-Docker:\ndocker run -d –name jenkinsDinD –privileged -v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts\nsudo docker run –privileged -d -p 8080:8080 -p 50000:50000 -v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts"
  },
  {
    "objectID": "jenkins.html#configuración-exitosa-de-jenkins-en-docker",
    "href": "jenkins.html#configuración-exitosa-de-jenkins-en-docker",
    "title": "Jenkins",
    "section": "Configuración exitosa de Jenkins en Docker",
    "text": "Configuración exitosa de Jenkins en Docker\n\nPaso 1: Descargar la imagen de Jenkins\nPrimero, descargamos la imagen oficial de Jenkins desde Docker Hub. Esto garantiza que estamos utilizando la versión más reciente y estable de Jenkins.\nsudo docker pull jenkins/jenkins:lts\n\n\nPaso 2: Ejecutar el contenedor de Jenkins\nEjecutamos un contenedor basado en la imagen de Jenkins. Es importante otorgar los privilegios necesarios y montar los volúmenes correctos para asegurar la persistencia de datos y el acceso al Docker socket.\nsudo docker run --privileged -d \\\n    -p 8080:8080 -p 50000:50000 \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v jenkins_home:/var/jenkins_home \\\n    jenkins/jenkins:lts\n\n\n\nCaptura de pantalla: Contenedor de Jenkins en ejecución\n\n\n\n\nPaso 3: Instalar Docker dentro del contenedor de Jenkins\nPara habilitar Docker dentro del contenedor de Jenkins, conectamos al CLI del contenedor como usuario root y descargamos Docker.\ncurl https://get.docker.com/ &gt; dockerinstall && chmod 777 dockerinstall && ./dockerinstall\n\n\nPaso 4: Configurar permisos para Jenkins\nAñadimos al usuario jenkins al grupo docker para que pueda gestionar contenedores. Además, configuramos los permisos del socket Docker.\nusermod -aG docker jenkins\nchmod 666 /var/run/docker.sock\n\n\n\nCaptura de pantalla: Configuración de Docker en Jenkins"
  },
  {
    "objectID": "jenkins.html#correcta-instalación-y-configuración-de-los-plugins-necesarios",
    "href": "jenkins.html#correcta-instalación-y-configuración-de-los-plugins-necesarios",
    "title": "Jenkins",
    "section": "Correcta instalación y configuración de los plugins necesarios",
    "text": "Correcta instalación y configuración de los plugins necesarios\nPara facilitar la integración y el desarrollo en Jenkins, instalamos los siguientes plugins esenciales:\n\nMaven Integration\nGit\nDocker\nSSH\nSonarQube Scanner"
  },
  {
    "objectID": "jenkins.html#implementación-adecuada-del-pipeline-de-jenkins-para-el-proyecto-spring-boot",
    "href": "jenkins.html#implementación-adecuada-del-pipeline-de-jenkins-para-el-proyecto-spring-boot",
    "title": "Jenkins",
    "section": "Implementación adecuada del pipeline de Jenkins para el proyecto Spring Boot",
    "text": "Implementación adecuada del pipeline de Jenkins para el proyecto Spring Boot\n\nPaso 1: Crear un pipeline en Jenkins\nUna vez configuradas las herramientas y plugins necesarios, creamos un pipeline para nuestro proyecto Spring Boot. Este pipeline puede incluir pasos como compilación, pruebas y empaquetado de la aplicación.\n\n\n\nCaptura de pantalla: Pipeline Spring Boot"
  },
  {
    "objectID": "jenkins.html#integración-exitosa-de-docker-dentro-del-pipeline",
    "href": "jenkins.html#integración-exitosa-de-docker-dentro-del-pipeline",
    "title": "Jenkins",
    "section": "Integración exitosa de Docker dentro del pipeline",
    "text": "Integración exitosa de Docker dentro del pipeline\n\nPaso 1: Ejecutar la pipeline\nValidamos que el pipeline se ejecuta correctamente con Docker integrado, permitiendo la construcción y despliegue de contenedores directamente desde Jenkins."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto",
    "section": "",
    "text": "MODIFICAR LA DOCUMENTACIÓN"
  },
  {
    "objectID": "index.html#principales-conceptos",
    "href": "index.html#principales-conceptos",
    "title": "Quarto",
    "section": "Principales Conceptos",
    "text": "Principales Conceptos\n\nEngine (Motor)\nEn Quarto, un engine es el motor que interpreta y ejecuta el código dentro de los documentos.\nGracias a su compatibilidad con lenguajes como R, Python y Julia, permite integrar código que genera resultados automáticamente en documentos dinámicos.\n\n\nMarkdown\nQuarto utiliza Markdown extendido para estructurar y formatear contenido. Mediante bloques y etiquetas específicas, los usuarios pueden combinar texto enriquecido, código y elementos interactivos en un solo archivo. Este archivo puede compilarse en formatos como PDF, HTML o presentaciones, adaptándose a diferentes necesidades.\n\n\nPublish (Publicación)\nLa publicación en Quarto consiste en compilar documentos o proyectos completos en un formato final. Esto incluye opciones para desplegar contenido en plataformas como GitHub Pages. Además, Quarto facilita la automatización del proceso de publicación, reduciendo esfuerzos manuales.\n\n\nGit\nQuarto se integra perfectamente con Git, ofreciendo funcionalidades para colaborar en proyectos, rastrear cambios y desplegar contenido actualizado en plataformas como GitHub. Esta integración mejora el trabajo en equipo y asegura un control detallado de versiones."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Ficha de Contacto",
    "section": "",
    "text": "Nombre: Boris Ivan\nCorreo Electrónico: (dadapunk456@gmail.com) ✉️\nDirección: Barcelona,Barcelona 📍"
  },
  {
    "objectID": "contact.html#información-personal",
    "href": "contact.html#información-personal",
    "title": "Ficha de Contacto",
    "section": "",
    "text": "Nombre: Boris Ivan\nCorreo Electrónico: (dadapunk456@gmail.com) ✉️\nDirección: Barcelona,Barcelona 📍"
  },
  {
    "objectID": "contact.html#redes-sociales",
    "href": "contact.html#redes-sociales",
    "title": "Ficha de Contacto",
    "section": "Redes Sociales",
    "text": "Redes Sociales\nConéctame a través de mis redes sociales:\n\nLinkedIn 👔\nGitHub 🐦"
  },
  {
    "objectID": "contact.html#enviar-un-mensaje",
    "href": "contact.html#enviar-un-mensaje",
    "title": "Ficha de Contacto",
    "section": "Enviar un Mensaje",
    "text": "Enviar un Mensaje\nSi prefieres, también puedes enviarme un mensaje directamente a través del siguiente correo:\nEmail: (dadapunk456@gmail.com) ✉️\n¡Saludos!"
  }
]