---
title: "GitHub"
---
::: callout
MODIFICAR LA DOCUMENTACIÓN
:::

GitHub es un espacio en línea donde puedo almacenar mis proyectos (repositorios), compartirlos con otras personas y colaborar. Utiliza Git para gestionar los cambios en el código, lo que me permite trabajar junto con otros desarrolladores sin interferir en su trabajo.

## ¿Qué es GitHub?

GitHub es una plataforma en línea que me permite guardar mis proyectos, trabajar en equipo y hacer un seguimiento de todos los cambios que se hacen en el código. Está basado en Git, un sistema de control de versiones que me ayuda a gestionar todo el historial de cambios, facilitando la colaboración sin que los errores o conflictos se presenten entre los miembros del equipo.

## Comandos Básicos de Git

Estos son algunos de los comandos más importantes que uso para trabajar con Git y GitHub:

- **`git init`**: Inicia un nuevo repositorio Git en mi directorio.
- **`git status`**: Muestra el estado de los archivos, es decir, qué archivos se han modificado o agregado.
- **`git add .`**: Agrega todos los archivos modificados para prepararlos antes de hacer un commit.
- **`git commit -m "Mensaje"`**: Guarda los cambios que he hecho en el repositorio con un mensaje explicativo.
- **`git push`**: Sube los cambios que he hecho localmente al repositorio remoto en GitHub.

## Ramas (Branches)

GitHub me permite trabajar con ramas, que son versiones separadas del proyecto donde puedo hacer cambios sin afectar el trabajo principal (la rama `main` o `master`). Luego, puedo fusionar las ramas cuando los cambios estén listos.

- **`git branch`**: Muestra las ramas que tengo en el repositorio.
- **`git switch <nombre_rama>`**: Cambio de una rama a otra.
- **`git merge <nombre_rama>`**: Fusiona los cambios de una rama a la actual.

## Colaboración en GitHub

GitHub está diseñado para que pueda colaborar fácilmente con otros desarrolladores. Algunas herramientas importantes para la colaboración son:

- **Pull Requests (PR)**: Cuando hago cambios en una rama y quiero integrarlos con la rama principal, creo un pull request. Otras personas pueden revisar y comentar mis cambios antes de fusionarlos.
- **Issues**: Puedo usar los issues para crear tareas, rastrear errores o sugerir nuevas funcionalidades para el proyecto.

## Fork y Pull Request

Si quiero contribuir a proyectos de código abierto, puedo seguir este flujo:

1. **Fork**: Hago una copia del repositorio para poder modificarlo.
2. **Pull Request**: Después de hacer mis cambios, envío un pull request para que los encargados del proyecto revisen y fusionen mis modificaciones.

## GitHub Actions

GitHub Actions me permite automatizar tareas como pruebas, compilación y despliegue. Puedo crear flujos de trabajo automáticos que se ejecutan en eventos específicos, como cuando subo nuevos cambios al repositorio.

## Seguridad y Permisos

En GitHub, puedo gestionar quién puede ver o modificar mis repositorios:

- **Permisos de Repositorio**: Puedo establecer quién tiene acceso para ver, editar o contribuir en mi proyecto.
- **Branch Protection Rules**: Puedo proteger ciertas ramas para asegurarme de que los cambios solo se hagan después de pasar revisiones o pruebas.

## Buenas Prácticas

Al trabajar con Git y GitHub, es importante seguir algunas buenas prácticas:

- Hacer **commits pequeños y frecuentes** para evitar conflictos.
- Escribir **mensajes de commit claros** que expliquen qué cambios se hicieron.
- Mantener las **ramas organizadas** y nombrarlas de manera descriptiva.

## Conclusión

GitHub no es solo un lugar donde almaceno código. Es una herramienta poderosa que me permite colaborar con otros, automatizar tareas y organizar el desarrollo de mis proyectos de manera más eficiente. Aprovechando todas sus funcionalidades y siguiendo buenas prácticas, puedo trabajar de manera más ordenada y productiva.