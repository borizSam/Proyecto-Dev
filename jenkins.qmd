---
title: "Jenkins"
---

Jenkins es una herramienta de automatización de código abierto que utilizo principalmente para **Integración Continua (CI)** y **Entrega Continua/Despliegue Continuo (CD)**. Me ayuda a compilar, probar y desplegar software de manera eficiente. 

## Características clave
- **Plugins:** Es altamente extensible con más de 1800 plugins, lo que me permite adaptarlo a mis necesidades.
- **Pipeline as Code:** Puedo definir pipelines usando archivos como `Jenkinsfile`, lo que facilita la gestión del flujo de trabajo.
- **Compatibilidad:** Funciona con múltiples sistemas operativos y herramientas de desarrollo que uso habitualmente.
- **Automatización:** Me permite programar y ejecutar automáticamente tareas repetitivas, ahorrándome tiempo.

# Jenkins CI/CD Pipeline for Spring Boot Application

## 1. Descargar la Imagen de Docker de Jenkins
Descargamos la imagen oficial de Jenkins desde DockerHub:

boris@Dev-Final:~/Jenkins$ sudo docker pull jenkins/jenkins:lts

Ahora ejecutamos lanzamos el contenedor importante revisar los volumenes y tambien el permiso de jenkins --privileged por que ejecutara un contenedor.

boris@Dev-Final:~/Jenkins$ sudo docker run --privileged -d -p 8080:8080 -p 50000:50000 -v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts

## 2. Crear Cuenta e Inicio Inicial
Una vez lanzado el contenedor de jenkins realizamos la instalación antes cogemos la contraseña inicial:
boris@Dev-Final:~/Jenkins$ sudo docker exec -it sharp_stonebraker cat /var/jenkins_home/secrets/initialAdminPassword
importante ponerle un nombre a nuestro contenedor que luego nos asigna uno random.

    1. Accede a Jenkins a través de `http://localhost:8080`.
    2. Recupera la contraseña inicial de administrador:
        sudo docker exec -it sharp_stonebraker cat /var/jenkins_home/secrets/initialAdminPassword
    3. Sigue el asistente de configuración:
        - Instala los complementos sugeridos o selecciona complementos específicos.
        - Crea una cuenta de administrador.
    4. Completa la configuración y accede al panel de control de Jenkins.

## 3. Instalar plugins basicós en nuestro jenkins:

    Vamos a Jenkins y instalamos los plugins necesarios.

    - Integración con Maven
    - Git
    - Estibador
    - SSH
    - Escáner SonarQube
    Por otra parte tambien instalamos el JKD y maven y Docker ya que para nuestro srping-boot nos sera necesario.
## 4. Creamos nuestro pipeline:

    Definimos nuestras tools docker git, maven y java importante revisar las versiones con las que se va atrabajar en este caso el springboot trabaja con JDK21 y Maven.

## Docker-in-Docker:

docker run -d --name jenkinsDinD --privileged -v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts


sudo docker run --privileged -d -p 8080:8080 -p 50000:50000 -v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts

## Configuración exitosa de Jenkins en Docker

### Paso 1: Descargar la imagen de Jenkins
Primero, descargamos la imagen oficial de Jenkins desde Docker Hub. Esto garantiza que estamos utilizando la versión más reciente y estable de Jenkins.

```bash
sudo docker pull jenkins/jenkins:lts
```

### Paso 2: Ejecutar el contenedor de Jenkins
Ejecutamos un contenedor basado en la imagen de Jenkins. Es importante otorgar los privilegios necesarios y montar los volúmenes correctos para asegurar la persistencia de datos y el acceso al Docker socket.

```bash
sudo docker run --privileged -d \
    -p 8080:8080 -p 50000:50000 \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v jenkins_home:/var/jenkins_home \
    jenkins/jenkins:lts
```

![Captura de pantalla: Contenedor de Jenkins en ejecución](https://github.com/user-attachments/assets/4e93c0df-eef6-45f4-b7a6-7a25da14c7ac)

### Paso 3: Instalar Docker dentro del contenedor de Jenkins
Para habilitar Docker dentro del contenedor de Jenkins, conectamos al CLI del contenedor como usuario root y descargamos Docker.

```bash
curl https://get.docker.com/ > dockerinstall && chmod 777 dockerinstall && ./dockerinstall
```

### Paso 4: Configurar permisos para Jenkins
Añadimos al usuario `jenkins` al grupo `docker` para que pueda gestionar contenedores. Además, configuramos los permisos del socket Docker.

```bash
usermod -aG docker jenkins
chmod 666 /var/run/docker.sock
```

![Captura de pantalla: Configuración de Docker en Jenkins](https://github.com/user-attachments/assets/166f7681-cbcd-4b32-84c5-073cc9c7e93e)

---

## Correcta instalación y configuración de los plugins necesarios

Para facilitar la integración y el desarrollo en Jenkins, instalamos los siguientes plugins esenciales:

1. **Maven Integration**
2. **Git**
3. **Docker**
4. **SSH**
5. **SonarQube Scanner**

![Captura de pantalla: Plugins instalados](https://github.com/user-attachments/assets/c6d7d666-4999-4183-a770-bfcb2b71a0d2)
![Captura de pantalla: Configuración de plugins](https://github.com/user-attachments/assets/2af83b6c-1446-43b9-81b3-de932f45d430)

---

## Implementación adecuada del pipeline de Jenkins para el proyecto Spring Boot

### Paso 1: Crear un pipeline en Jenkins
Una vez configuradas las herramientas y plugins necesarios, creamos un pipeline para nuestro proyecto Spring Boot. Este pipeline puede incluir pasos como compilación, pruebas y empaquetado de la aplicación.

![Captura de pantalla: Pipeline Spring Boot](https://github.com/user-attachments/assets/72575a19-206c-43a4-bfdc-fe7940e8bb62)

---

## Integración exitosa de Docker dentro del pipeline

### Paso 1: Ejecutar la pipeline
Validamos que el pipeline se ejecuta correctamente con Docker integrado, permitiendo la construcción y despliegue de contenedores directamente desde Jenkins.

![Captura de pantalla: Ejecución del pipeline](https://github.com/user-attachments/assets/375e7370-0890-432a-8c4f-1afcbcf6fa47)
![Captura de pantalla: Resultado del pipeline](https://github.com/user-attachments/assets/e7c0d4a1-f6fb-4331-917d-1c73b0bcea3c)

---